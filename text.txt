pos에 item을 삽입한다. pos = 0일 경우 리스트의 가장 앞에 삽입한다. 삽입에 성공한 경우 SUCCESS를 반환한다. pos = -1일 경우 리스트의 가장 뒤에 삽입한다. pos가 너무 크거나 음수일 경우 리스트는 변경되지 않으며 FAILURE를 반환한다. 기본적으로 노드의 front, back을 움직여 노드의 items에 삽입하나, 더 이상 삽입이 불가능할 경우 새로운 노드를 동적할당하여 데이터를 삽입한다.

int remove(ULNode** lst, int pos, Item* removed);
pos의 데이터를 삭제하고 removed에 삭제되는 데이터를 할당한다. 삭제에 성공한 경우 SUCCESS를 반환한다. pos = 0일 경우 리스트의 가장 앞에 있는 데이터를 삭제한다. pos = -1일 경우 리스트의 가장 뒤에 있는 데이터를 삭제한다. pos가 너무 크거나 -1보다 작을 경우 리스트는 변경되지 않으며 FAILURE를 반환한다. 기본적으로 노드의 front, back을 움직여 items에서 데이터를 삭제하며, 만일 노드에서 모든 데이터가 삭제된 경우 노드의 메모리 할당을 해제한다. 예외적으로 리스트에 노드가 하나가 남았을 때는 노드에서 데이터가 모두 삭제되어도 노드를 유지한다.

생성에 성공한 경우 SUCCESS를 반환한다.

pos에 있는 데이터를 accessed에 할당한다. pos = 0일 경우 리스트의 가장 앞에 있는 데이터를 읽다. pos = -1일 경우 리스트의 가장 뒤에 있는 데이터를 읽는다. pos가 너무 크거나 -1보다 작을 경우 데이터를 읽는데 실패한다. 데이터를 가져오는데 성공한 경우 SUCCESS를, 실패한 경우 FAILURE를 반환한다. 리스트는 변경되지 않는다.

입력된 lst와 pos를 해석하여 ret_prev, ret_node, ret_idx를 할당한다. ret_node는 pos에 해당하는 데이터가 속하는 노드, ret_prev는 ret_node 바로 전 노드이다. 없으면 NULL로 할당한다. ret_idx는 ret_node에서 pos에 해당하는 데이터의 items에서의 인덱스다. 즉 (*ret_node)->items[*ret_idx]로 lst의 pos에 존재하는 데이터를 가져올 수 있다. 만일 pos가 리스트에 존재하지 않는 데이터를 가리키면, FAILURE를 반환하며 pos를 성공적으로 해석했다면 SUCCESS를 반환한다.

노드의 데이터와 값을 다음과 같이 출력한다.
0x55b18bfcb3b0: front[-1] back[3] max[7] arr[ 5 4 3 _ _ _ _ ] next:0x55b18bfcb360 

print_node를 이용하여 lst의 모든 노드를 출력한다.


